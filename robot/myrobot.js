// Generated by LiveScript 1.2.0
(function(){
  var MyRobot, tr;
  var locking = false;
  importScripts('../base-robot.js');
  MyRobot = (function(superclass){
    var prototype = extend$((import$(MyRobot, superclass).displayName = 'MyRobot', MyRobot), superclass).prototype, constructor = MyRobot;
    prototype.onIdle = function(){
     var myangle,enangle,leftdis,rightdis;
     if(this.myVarEnemy){
        myangle = this.me.angle%360;
        enangle = this.myVarEnemy[0].angle%360;
        leftdis = (myangle+360-enangle)%360;
        rightdis = (enangle+360-myangle)%360;
        if(leftdis!=rightdis){
           if(leftdis>rightdis){
               this.turn_turret_right(rightdis+5+Math.random()*10);
           }
           else{
               this.turn_turret_left(leftdis+5+Math.random()*10);
           }
           this.shoot();
        }
        else{
           this.shoot();
        }
        this.myVarEnemy = undefined;
     }
     else{
        this.move_forwards(Math.random()*50);
        this.turn_turret_left(Math.random*30+20);
        this.turn_right(Math.random*30+30);
     }
     if(!locking){
       this.turn_turret_left(5);
       this.turn_left(5);
     }
     this.moveforwards(50);
     locking = false;
    };
    prototype.onWallCollide = function(){
      this.move_opposide(10);
      this.turn_left(20);
    };
    prototype.runaway = function(){
      this.move_opposide(40);
    };
    prototype.onHit = function(){
      this.runaway();
      locking = false;
      this.yell("Splendid, Brother!");
    };
    prototype.onEnemySpot = function(){
      this.yell("Show me what you got,Snake!");
      locking = true;
      this.shoot();
    };
    function MyRobot(){
      MyRobot.superclass.apply(this, arguments);
    }
    return MyRobot;
  }(BaseRobot));
  tr = new MyRobot("Liquid");
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
