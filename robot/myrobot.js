// Generated by LiveScript 1.2.0
(function(){
  var MyRobot, tr;
  var emergency = false;
  var stage = 0 ;
  importScripts('../base-robot.js');
  MyRobot = (function(superclass){
    var prototype = extend$((import$(MyRobot, superclass).displayName = 'MyRobot', MyRobot), superclass).prototype, constructor = MyRobot;
    prototype.destroy = function(){
       var myangle,enemyangle;
       myangle = this.me.angle%360;
       if(this.myVarEnemy){
           enemyangle = this.myVarEnemy[0].angle;
           if(enemyangle - myangle >0){
                this.turn_right((enemyangle - myangle+365)%360);
           }
           else{
                this.turn_left((myangle - enemyangle + 365)%360)
           }
           this.shoot();
       }
    };
    prototype.search = function(){
      if(Math.random() > 0.7){
         this.turn_turret_left(45);
         this.turn_left(15);
         if(Math.random()>0.6){
            this.move_forwards(50);
         }
         else{
            this.move_backwards(25);
         }
      }
      else{
         this.turn_turret_right(30);
         this.turn_right(40);
         if(Math.random()>0.6){
            this.move_forwards(50);
         }
         else{
            this.move_backwards(25);
         }
      }
    };
    prototype.onIdle = function(){
       var myangle,enemyangle;
       stage ++;
       myangle= this.me.angle%360;
       if(this.myVarEnemy){
          enemyangle = this.myVarEnemy[0].angle;
       }
       this.search();
    };
    prototype.onWallCollide = function(){
      this.move_opposide(60);
      this.turn_left(90);
    };
    prototype.onHit = function(){
      this.move_forwards(50);
      emergency = true;
      this.yell("Splendid, Brother!");
    };
    prototype.onEnemySpot = function(){
      var random = Math.random()%2;
      this.yell("Show me what you got, SNAKE!!");
	  if(emergency){
        this.shoot();
        this.destroy();
      }
      else{
        this.shoot();
        if(Math.random()>0.5){
            this.turn_left(30);
        }
        else{
            this.turn_right(30);
        }
        this.shoot();
      }
      close = true;
    };
    function MyRobot(){
      MyRobot.superclass.apply(this, arguments);
    }
    return MyRobot;
  }(BaseRobot));
  tr = new MyRobot("Liquid");
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
